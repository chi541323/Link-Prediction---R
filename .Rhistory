View(new)
new <- read.csv("new.csv", header = F)
cond1 <- new$V2 == 0
new <- new[!cond1,]
View(new)
new[1,3]
View(new)
install.packages("dplyr")
new <- read.csv("new.csv", header = F)
library(dplyr)
new <- read.csv("new.csv", header = F)
#cond1 <- new$V2 == 0
#new <- new[!cond1,]
print(new <- new %>% filter(!V2=0)
library(gtools)
library(igraph)
library(csv)
library(RcppZiggurat)
library(dplyr)
new <- read.csv("new.csv", header = F)
#cond1 <- new$V2 == 0
#new <- new[!cond1,]
print(new <- new %>% filter(!V2=0)
print(new <- new %>% filter(!V2==0)
new <- new %>% filter(!V2==0)
new <- new filter(!V2==0)
new <- new %>% filter(!V2==0)
new
View(new)
while(i<=10000){
t_v1 <- testDatalink[i,1]
t_v2 <- testDatalink[i,2]
sv_Intest <- binary_search(node[,1],t_v1)  # testdata的source vertex若在node內，則b=true
tv_Intest <- binary_search(node[,1],t_v2)  # testdata的target vertex若在node內，則b=true
if(sv_Intest == TRUE){
index = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
node[index,2] <- 1
}
if(tv_Intest == TRUE){
index = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
node[index,2] <- 1
}
i <- i+1
}
node <- node %>% filter(!V2==0)
View(node)
g <- graph.ring(10)
get.shortest.paths(g, 5,1)
shortest.paths(g)
g <- graph.ring(10)
shortest.paths(g)
get.shortest.paths(g, 5,1)
g <- graph.ring(10)
distances(g)
shortest.paths(g)
mean_distance(g)
get.shortest.paths(g, 5,1)
get.shortest.paths(g, 4,1)
distances(g)
distances(g,4,1)
pic <-graph_from_data_frame(d = p1link, vertices = node, directed = T)
View(pic)
View(pic)
pic <-graph_from_data_frame(d = p1link, vertices = node, directed = T)
data <- node # iris 是 R 內建的資料。
write.table(data, file = "test.CSV", sep = ",")
#data <- node # iris 是 R 內建的資料。
write.table(node, file = "node.csv", sep = ",")
library(gtools)
library(igraph)
library(csv)
library(RcppZiggurat)
library(dplyr)
p1L <- read.csv("Period1.csv", header = F)
p2L <- read.csv("Period2.csv", header = F)
y<-1
while(y<=154836){
period1_v1 <- p1L[y,1]
period1_v2 <- p1L[y,2]
source_ver_InP1 <- binary_search(p2L[,1],period1_v1)
if(source_ver_InP1 == TRUE){
num = findInterval(p1L[y,1], p2L[,1])
if(p2L[num,2] == p1L[y,2]){
print(num)
}
}
y<-y+1
}
print(num)
num = findInterval(p1L[y,1], p2L[,1])
y<-1
while(y<=154836){
period1_v1 <- p1L[y,1]
period1_v2 <- p1L[y,2]
source_ver_InP1 <- binary_search(p2L[,1],period1_v1)
if(source_ver_InP1 == TRUE){
num = findInterval(p1L[y,1], p2L[,1])
if(p2L[num,2] == p1L[y,2]){
print(num)
}
}
y<-y+1
}
y<-1
while(y<=154836){
period1_v1 <- p1L[y,1]
period1_v2 <- p1L[y,2]
t<-1
while(t<=98353){
period2_v1 <- p2L[t,1]
period2_v2 <- p2L[t,2]
if(period1_v1 == period2_v1 ){
if(period1_v2 == period2_v2){
print(y,t)
}
}
}
}
p1L <- read.csv("Period1.csv", header = F)
p2L <- read.csv("Period2.csv", header = F)
y<-1
while(y<=154836){
period1_v1 <- p1L[y,1]
period1_v2 <- p1L[y,2]
t<-1
while(t<=98353){
period2_v1 <- p2L[t,1]
period2_v2 <- p2L[t,2]
if(period1_v1 == period2_v1 ){
if(period1_v2 == period2_v2){
print(y,t)
}
}
t<-t+1
}
y<-y+1
}
p1L <- read.csv("Period1.csv", header = F)
p2L <- read.csv("Period2.csv", header = F)
y<-1
while(y<=154836){
period1_v1 <- p1L[y,1]
period1_v2 <- p1L[y,2]
t<-1
while(t<=98353){
period2_v1 <- p2L[t,1]
period2_v2 <- p2L[t,2]
if(period1_v1 == period2_v1 ){
if(period1_v2 == period2_v2){
print(y,t)
}
}
t<-t+1
}
y<-y+1
print(y)
}
g <- graph.ring(10)
distances(g,4,1)
shortest.paths(g)
get.shortest.paths(g, 4,1)
g <- graph.ring(10)
distances(g,4,1)
distances(pic,p2link[1,1],p2link[2,1])
pic <-graph_from_data_frame(d = p1link, vertices = node, directed = T)
distances(pic,p2link[1,1],p2link[2,1])
distances(pic,p2link[1,1],p2link[1,2])
p2link[1,1]
get.shortest.paths(pic,p2link[1,1],p2link[2,1)
get.shortest.paths(pic,p2link[1,1],p2link[2,1])
p2_v1 <- p2link[1,1]
p2_v2 <- p2link[2,1]
sv_InP2 <- binary_search(node[,1],p2_v1)  # period2的source vertex若在node內，則b=true
tv_InP2 <- binary_search(node[,1],p2_v2) # period2的target vertex若在node內，則b=true
if(sv_InP2 == TRUE){
index = findInterval(p2link[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
node[index,2] <- 1
}
if(tv_InP2 == TRUE){
index = findInterval(p2link[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
node[index,2] <- 1
}
get.shortest.paths(pic,p2link[1,1],p2link[2,1])
p2link[1,1]
p2_v1 <- p2link[1,1]
p2_v2 <- p2link[2,1]
sv_InP2 <- binary_search(node[,1],p2_v1)  # period2的source vertex若在node內，則b=true
tv_InP2 <- binary_search(node[,1],p2_v2) # period2的target vertex若在node內，則b=true
index1 = findInterval(p2link[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(p2link[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
get.shortest.paths(pic,node[index1,1],node[index2,1])
get.shortest.paths(pic,node[index1],node[index2])
get.shortest.paths(pic,node[index1],node[index2])
distances(pic,node[index1],node[index2])
p2_v1 <- p2link[1,1]
p2_v2 <- p2link[2,1]
sv_InP2 <- binary_search(node[,1],p2_v1)  # period2的source vertex若在node內，則b=true
tv_InP2 <- binary_search(node[,1],p2_v2) # period2的target vertex若在node內，則b=true
index1 = findInterval(p2link[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(p2link[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
get.shortest.paths(pic,index1,index2)
distances(pic,index1,index2)
index1
index2
p2_v1 <- p2link[1,1]
p2_v2 <- p2link[2,1]
index1 = findInterval(p2link[1,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(p2link[1,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
index1
index2
get.shortest.paths(pic,index1,index2)
distances(pic,index1,index2)
index1 = findInterval(p2link[2,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(p2link[2,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
index1
index2
get.shortest.paths(pic,index1,index2)
distances(pic,index1,index2)
index1 = findInterval(p2link[3,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(p2link[3,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
index1
index2
get.shortest.paths(pic,index1,index2)
distances(pic,index1,index2)
index1 = findInterval(p2link[4,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(p2link[4,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
index1
index2
get.shortest.paths(pic,index1,index2)
distances(pic,index1,index2)
distance(index1,index2)
distance(pic,index1,index2)
distances(pic,index1,index2)
distances(pic,index1,index2,method = "euclidean")
shortest_paths(pic,index1,index2)
mean_distance(pic)
average.path.length(pic, directed=TRUE, unconnected=TRUE)
tessst <-distances(pic,index1,index2)
View(tessst)
#temp <- 1
#while(temp<=98353)
index1 = findInterval(p2link[1,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(p2link[1,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
p2link[1,1]
index1
p2link[2,1]
index2
p2link[1,2]
temp <- 1
while(temp<=10){
source_ver = findInterval(p2link[temp,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
target_ver = findInterval(p2link[temp,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
p2link[temp,3] <- distances(pic,source_ver,target_ver)
}
temp <- 1
while(temp<=10){
source_ver = findInterval(p2link[temp,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
target_ver = findInterval(p2link[temp,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
p2link[temp,3] <- distances(pic,source_ver,target_ver)
temp = temp+1
}
View(p2link)
temp <- 1
while(temp<=100){
source_ver = findInterval(p2link[temp,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
target_ver = findInterval(p2link[temp,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
p2link[temp,3] <- distances(pic,source_ver,target_ver)
temp = temp+1
}
temp <- 1
while(temp<=98353){
source_ver = findInterval(p2link[temp,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
target_ver = findInterval(p2link[temp,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
p2link[temp,3] <- distances(pic,source_ver,target_ver)
temp = temp+1
}
link <- read.csv("Period1+2.csv", header = F)
Allpic <- graph_from_data_frame(d = link, vertices = node, directed = T)
View(node)
temp <- 1
while(temp<=10000){
source_ver = findInterval(testDatalink[temp,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
target_ver = findInterval(testDatalink[temp,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
testDatalink[temp,3] <- distances(Allpic,source_ver,target_ver)
temp = temp+1
}
View(testDatalink)
write.table(node, file = "myResult.csv", sep = ",")
write.table(testDatalink, file = "myResult.csv", sep = ",")
result <- read.csv("myResult.csv", header = F)
View(result)
result[,2] <- result[,3]
write.table(testDatalink, file = "myResult.csv", sep = ",")
write.table(result, file = "myResult.csv", sep = ",")
t1 <- transitivity(Allpic,type = "weighted")
t1[0]
t1[1]
Allpic
View(Allpic)
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
testDatalink[i,4] <- t1[index1] + t1[index2]
i <- i+1
}
View(testDatalink)
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
View(testDatalink)
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
t1[index1]
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
print(t1[index1])
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
print(t1[1])
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
print(index1)
print(t1[1])
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10000){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
View(testDatalink)
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
if(index1[i]=="NaN"){
print("haha")
}
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
temp <- index1[i] =="NaN"
if(temp == TRUE){
print("haha")
}
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
temp <- index1[i] =="NaN"
print(temp)
if(temp == TRUE){
print("haha")
}
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
temp <- index1[i] =="NaN"
print(temp)
#(temp == TRUE){
#print("haha")
# }
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
print(index1)
temp <- index1[i] =="NaN"
print(temp)
#(temp == TRUE){
#print("haha")
# }
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
print(index1[i])
temp <- index1[i] =="NaN"
print(temp)
#(temp == TRUE){
#print("haha")
# }
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
print(t1[index1])
temp <- index1[i] =="NaN"
print(temp)
#(temp == TRUE){
#print("haha")
# }
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
print(t1[index1])
temp <- t1[index1] =="NaN"
print(temp)
#(temp == TRUE){
#print("haha")
# }
testDatalink[i,4] <- (t1[index1] + t1[index2])
i <- i+1
}
i<-1
while(i<=10){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
temp_v1 <- t1[index1] =="NaN"
temp_v2 <- t1[index2] =="NaN"
if(temp_v1 != TRUE){
if(temp_v2 != TRUE){
testDatalink[i,4] <- (t1[index1] + t1[index2])
}
else if (temp_v2 == TRUE){
testDatalink[i,4] <- t1[index1]
}
}
if(temp_v1 == TRUE){
if(temp_v2 !=TRUE){
testDatalink[i,4] <- t1[index2]
}
}
if(temp_v1 == TRUE && temp_v2 ==TRUE){
testDatalink[i,4] <- 0
}
i <- i+1
}
View(testDatalink)
i<-1
while(i<=10000){
index1 = findInterval(testDatalink[i,1], node[,1]) #找source vertex在node內是第幾個node，丟入index
index2 = findInterval(testDatalink[i,2], node[,1])  #找target vertex在node內是第幾個node，丟入index
temp_v1 <- t1[index1] =="NaN"
temp_v2 <- t1[index2] =="NaN"
if(temp_v1 != TRUE){
if(temp_v2 != TRUE){
testDatalink[i,4] <- (t1[index1] + t1[index2])
}
else if (temp_v2 == TRUE){
testDatalink[i,4] <- t1[index1]
}
}
if(temp_v1 == TRUE){
if(temp_v2 !=TRUE){
testDatalink[i,4] <- t1[index2]
}
}
if(temp_v1 == TRUE && temp_v2 ==TRUE){
testDatalink[i,4] <- 0
}
i <- i+1
}
write.table(testDatalink, file = "myResult.csv", sep = ",")
result <- read.csv("myResult.csv", header = F)
result[,2] <- result[,3]
write.table(result, file = "myResult.csv", sep = ",")
result <- read.csv("myResult.csv", header = F)
result[,2] <- result[,3]
write.table(result, file = "myResult.csv", sep = ",")
View(testDatalink)
View(testDatalink)
install.packages("rmarkdown")
